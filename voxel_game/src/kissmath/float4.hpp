// file was generated by kissmath.py at <TODO: add github link>
#pragma once

////// Forward declarations

#include "float.hpp"

namespace kissmath {
	//// forward declarations
	
	struct float3;
	struct int4;
	struct int64v4;
	struct float2;
	struct bool4;
	struct uint8v4;
	
	struct float4 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				float	x, y, z, w;
			};
			float		arr[4];
		};
		
		// Component indexing operator
		inline constexpr float& operator[] (int i);
		
		// Component indexing operator
		inline constexpr float const& operator[] (int i) const;
		
		
		// uninitialized constructor
		inline float4 () = default;
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		inline constexpr float4 (float all);
		
		// supply all components
		inline constexpr float4 (float x, float y, float z, float w);
		
		// extend vector
		inline constexpr float4 (float2 xy, float z, float w);
		
		// extend vector
		inline constexpr float4 (float3 xyz, float w);
		
		
		//// Truncating cast operators
		
		// truncating cast operator
		inline constexpr explicit operator float2 () const;
		
		// truncating cast operator
		inline constexpr explicit operator float3 () const;
		
		
		//// Type cast operators
		
		// type cast operator
		inline constexpr explicit operator bool4 () const;
		
		// type cast operator
		inline constexpr explicit operator int4 () const;
		
		// type cast operator
		inline constexpr explicit operator int64v4 () const;
		
		// type cast operator
		inline constexpr explicit operator uint8v4 () const;
		
		
		// componentwise arithmetic operator
		inline float4 operator+= (float4 r);
		
		// componentwise arithmetic operator
		inline float4 operator-= (float4 r);
		
		// componentwise arithmetic operator
		inline float4 operator*= (float4 r);
		
		// componentwise arithmetic operator
		inline float4 operator/= (float4 r);
		
	};
	
	//// arthmethic ops
	
	inline constexpr float4 operator+ (float4 v);
	
	inline constexpr float4 operator- (float4 v);
	
	inline constexpr float4 operator+ (float4 l, float4 r);
	
	inline constexpr float4 operator- (float4 l, float4 r);
	
	inline constexpr float4 operator* (float4 l, float4 r);
	
	inline constexpr float4 operator/ (float4 l, float4 r);
	
	
	//// bitwise ops
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	inline constexpr bool4 operator< (float4 l, float4 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool4 operator<= (float4 l, float4 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool4 operator> (float4 l, float4 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool4 operator>= (float4 l, float4 r);
	
	// componentwise equality comparison, returns a bool vector
	inline constexpr bool4 equal (float4 l, float4 r);
	
	// componentwise inequality comparison, returns a bool vector
	inline constexpr bool4 nequal (float4 l, float4 r);
	
	// full equality comparison, returns true only if all components are equal
	inline constexpr bool operator== (float4 l, float4 r);
	
	// full inequality comparison, returns true if any components are inequal
	inline constexpr bool operator!= (float4 l, float4 r);
	
	// componentwise ternary (c ? l : r)
	inline constexpr float4 select (bool4 c, float4 l, float4 r);
	
	
	//// misc ops
	// componentwise absolute
	inline float4 abs (float4 v);
	
	// componentwise minimum
	inline constexpr float4 min (float4 l, float4 r);
	
	// componentwise maximum
	inline constexpr float4 max (float4 l, float4 r);
	
	// componentwise clamp into range [a,b]
	inline constexpr float4 clamp (float4 x, float4 a, float4 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	inline constexpr float4 clamp (float4 x);
	
	// get minimum component of vector, optionally get component index via min_index
	inline float min_component (float4 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	inline float max_component (float4 v, int* max_index=nullptr);
	
	
	// componentwise floor
	inline float4 floor (float4 v);
	
	// componentwise ceil
	inline float4 ceil (float4 v);
	
	// componentwise round
	inline float4 round (float4 v);
	
	// componentwise floor to int
	inline int4 floori (float4 v);
	
	// componentwise ceil to int
	inline int4 ceili (float4 v);
	
	// componentwise round to int
	inline int4 roundi (float4 v);
	
	// componentwise pow
	inline float4 pow (float4 v, float4 e);
	
	// componentwise wrap
	inline float4 wrap (float4 v, float4 range);
	
	// componentwise wrap
	inline float4 wrap (float4 v, float4 a, float4 b);
	
	
	
	//// Angle conversion
	
	// converts degrees to radiants
	inline constexpr float4 to_radians (float4 deg);
	
	// converts radiants to degrees
	inline constexpr float4 to_degrees (float4 rad);
	
	// converts degrees to radiants
	// shortform to make degree literals more readable
	inline constexpr float4 deg (float4 deg);
	
	//// Linear interpolation
	
	// linear interpolation
	// like getting the output of a linear function
	// ex. t=0 -> a ; t=1 -> b ; t=0.5 -> (a+b)/2
	inline constexpr float4 lerp (float4 a, float4 b, float4 t);
	
	// linear mapping
	// sometimes called inverse linear interpolation
	// like getting the x for a y on a linear function
	// ex. map(70, 0,100) -> 0.7 ; map(0.5, -1,+1) -> 0.75
	inline constexpr float4 map (float4 x, float4 in_a, float4 in_b);
	
	// linear remapping
	// equivalent of lerp(out_a, out_b, map(x, in_a, in_b))
	inline constexpr float4 map (float4 x, float4 in_a, float4 in_b, float4 out_a, float4 out_b);
	
	
	//// Various interpolation
	
	// standard smoothstep interpolation
	inline float4 smoothstep (float4 x);
	
	// 3 point bezier interpolation
	inline float4 bezier (float4 a, float4 b, float4 c, float t);
	
	// 4 point bezier interpolation
	inline float4 bezier (float4 a, float4 b, float4 c, float4 d, float t);
	
	// 5 point bezier interpolation
	inline float4 bezier (float4 a, float4 b, float4 c, float4 d, float4 e, float t);
	
	
	//// Vector math
	
	// magnitude of vector
	inline float length (float4 v);
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	inline constexpr float length_sqr (float4 v);
	
	// distance between points, equivalent to length(a - b)
	inline float distance (float4 a, float4 b);
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	inline float4 normalize (float4 v);
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	inline float4 normalizesafe (float4 v);
	
	// dot product
	inline constexpr float dot (float4 l, float4 r);
	
}


#include "float4.inl"
