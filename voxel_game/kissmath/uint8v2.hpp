// file was generated by kissmath.py at <TODO: add github link>
#pragma once

////// Forward declarations

#include "uint8.hpp"

namespace kissmath {
	//// forward declarations
	
	struct bool2;
	struct int2;
	struct int64v2;
	struct uint8v3;
	struct uint8v4;
	struct float2;
	
	struct uint8v2 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				uint8	x, y;
			};
			uint8		arr[2];
		};
		
		// Component indexing operator
		inline constexpr uint8& operator[] (int i);
		
		// Component indexing operator
		inline constexpr uint8 const& operator[] (int i) const;
		
		
		// uninitialized constructor
		inline uint8v2 ();
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		inline constexpr uint8v2 (uint8 all);
		
		// supply all components
		inline constexpr uint8v2 (uint8 x, uint8 y);
		
		// truncate vector
		inline constexpr uint8v2 (uint8v3 v);
		
		// truncate vector
		inline constexpr uint8v2 (uint8v4 v);
		
		
		//// Truncating cast operators
		
		
		//// Type cast operators
		
		// type cast operator
		inline constexpr explicit operator bool2 () const;
		
		// type cast operator
		inline constexpr explicit operator float2 () const;
		
		// type cast operator
		inline constexpr explicit operator int2 () const;
		
		// type cast operator
		inline constexpr explicit operator int64v2 () const;
		
		
		// componentwise arithmetic operator
		inline uint8v2 operator+= (uint8v2 r);
		
		// componentwise arithmetic operator
		inline uint8v2 operator-= (uint8v2 r);
		
		// componentwise arithmetic operator
		inline uint8v2 operator*= (uint8v2 r);
		
		// componentwise arithmetic operator
		inline uint8v2 operator/= (uint8v2 r);
		
	};
	
	//// arthmethic ops
	
	inline constexpr uint8v2 operator+ (uint8v2 v);
	
	inline constexpr uint8v2 operator+ (uint8v2 l, uint8v2 r);
	
	inline constexpr uint8v2 operator- (uint8v2 l, uint8v2 r);
	
	inline constexpr uint8v2 operator* (uint8v2 l, uint8v2 r);
	
	inline constexpr uint8v2 operator/ (uint8v2 l, uint8v2 r);
	
	
	//// bitwise ops
	
	inline constexpr uint8v2 operator~ (uint8v2 v);
	
	inline constexpr uint8v2 operator& (uint8v2 l, uint8v2 r);
	
	inline constexpr uint8v2 operator| (uint8v2 l, uint8v2 r);
	
	inline constexpr uint8v2 operator^ (uint8v2 l, uint8v2 r);
	
	inline constexpr uint8v2 operator<< (uint8v2 l, uint8v2 r);
	
	inline constexpr uint8v2 operator>> (uint8v2 l, uint8v2 r);
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator< (uint8v2 l, uint8v2 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator<= (uint8v2 l, uint8v2 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator> (uint8v2 l, uint8v2 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator>= (uint8v2 l, uint8v2 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator== (uint8v2 l, uint8v2 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator!= (uint8v2 l, uint8v2 r);
	
	// vectors are equal, equivalent to all(l == r)
	inline constexpr bool equal (uint8v2 l, uint8v2 r);
	
	// componentwise ternary (c ? l : r)
	inline constexpr uint8v2 select (bool2 c, uint8v2 l, uint8v2 r);
	
	
	//// misc ops
	// componentwise minimum
	inline constexpr uint8v2 min (uint8v2 l, uint8v2 r);
	
	// componentwise maximum
	inline constexpr uint8v2 max (uint8v2 l, uint8v2 r);
	
	// componentwise clamp into range [a,b]
	inline constexpr uint8v2 clamp (uint8v2 x, uint8v2 a, uint8v2 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	inline constexpr uint8v2 clamp (uint8v2 x);
	
	// get minimum component of vector, optionally get component index via min_index
	inline uint8 min_component (uint8v2 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	inline uint8 max_component (uint8v2 v, int* max_index=nullptr);
	
	
	// componentwise wrap
	inline uint8v2 wrap (uint8v2 v, uint8v2 range);
	
	// componentwise wrap
	inline uint8v2 wrap (uint8v2 v, uint8v2 a, uint8v2 b);
	
	
	
	//// Vector math
	
}


#include "uint8v2.inl"
