// file was generated by kissmath.py at <TODO: add github link>

////// Inline definitions

#include "int64v2.hpp"
#include "bool2.hpp"
#include "float2.hpp"
#include "int3.hpp"
#include "uint8v2.hpp"
#include "int4.hpp"

namespace kissmath {
	//// forward declarations
	// typedef these because the _t suffix is kinda unwieldy when using these types often
	
	typedef int64_t int64;
	typedef uint8_t uint8;
	
	// Component indexing operator
	inline constexpr int& int2::operator[] (int i) {
		return arr[i];
	}
	
	// Component indexing operator
	inline constexpr int const& int2::operator[] (int i) const {
		return arr[i];
	}
	
	
	// sets all components to one value
	// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
	// and short initialization like float3 a = 0; works
	inline constexpr int2::int2 (int all): x{all}, y{all} {
		
	}
	
	// supply all components
	inline constexpr int2::int2 (int x, int y): x{x}, y{y} {
		
	}
	
	// truncate vector
	inline constexpr int2::int2 (int3 v): x{v.x}, y{v.y} {
		
	}
	
	// truncate vector
	inline constexpr int2::int2 (int4 v): x{v.x}, y{v.y} {
		
	}
	
	//// Truncating cast operators
	
	
	//// Type cast operators
	
	
	// type cast operator
	inline constexpr int2::operator bool2 () const {
		return bool2((bool)x, (bool)y);
	}
	
	// type cast operator
	inline constexpr int2::operator float2 () const {
		return float2((float)x, (float)y);
	}
	
	// type cast operator
	inline constexpr int2::operator int64v2 () const {
		return int64v2((int64)x, (int64)y);
	}
	
	// type cast operator
	inline constexpr int2::operator uint8v2 () const {
		return uint8v2((uint8)x, (uint8)y);
	}
	
	
	// componentwise arithmetic operator
	inline int2 int2::operator+= (int2 r) {
		x += r.x;
		y += r.y;
		return *this;
	}
	
	// componentwise arithmetic operator
	inline int2 int2::operator-= (int2 r) {
		x -= r.x;
		y -= r.y;
		return *this;
	}
	
	// componentwise arithmetic operator
	inline int2 int2::operator*= (int2 r) {
		x *= r.x;
		y *= r.y;
		return *this;
	}
	
	// componentwise arithmetic operator
	inline int2 int2::operator/= (int2 r) {
		x /= r.x;
		y /= r.y;
		return *this;
	}
	
	//// arthmethic ops
	
	
	inline constexpr int2 operator+ (int2 v) {
		return int2(+v.x, +v.y);
	}
	
	inline constexpr int2 operator- (int2 v) {
		return int2(-v.x, -v.y);
	}
	
	inline constexpr int2 operator+ (int2 l, int2 r) {
		return int2(l.x + r.x, l.y + r.y);
	}
	
	inline constexpr int2 operator- (int2 l, int2 r) {
		return int2(l.x - r.x, l.y - r.y);
	}
	
	inline constexpr int2 operator* (int2 l, int2 r) {
		return int2(l.x * r.x, l.y * r.y);
	}
	
	inline constexpr int2 operator/ (int2 l, int2 r) {
		return int2(l.x / r.x, l.y / r.y);
	}
	
	//// bitwise ops
	
	
	inline constexpr int2 operator~ (int2 v) {
		return int2(~v.x, ~v.y);
	}
	
	inline constexpr int2 operator& (int2 l, int2 r) {
		return int2(l.x & r.x, l.y & r.y);
	}
	
	inline constexpr int2 operator| (int2 l, int2 r) {
		return int2(l.x | r.x, l.y | r.y);
	}
	
	inline constexpr int2 operator^ (int2 l, int2 r) {
		return int2(l.x ^ r.x, l.y ^ r.y);
	}
	
	inline constexpr int2 operator<< (int2 l, int2 r) {
		return int2(l.x << r.x, l.y << r.y);
	}
	
	inline constexpr int2 operator>> (int2 l, int2 r) {
		return int2(l.x >> r.x, l.y >> r.y);
	}
	
	//// comparison ops
	
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator< (int2 l, int2 r) {
		return bool2(l.x < r.x, l.y < r.y);
	}
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator<= (int2 l, int2 r) {
		return bool2(l.x <= r.x, l.y <= r.y);
	}
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator> (int2 l, int2 r) {
		return bool2(l.x > r.x, l.y > r.y);
	}
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator>= (int2 l, int2 r) {
		return bool2(l.x >= r.x, l.y >= r.y);
	}
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator== (int2 l, int2 r) {
		return bool2(l.x == r.x, l.y == r.y);
	}
	
	// componentwise comparison returns a bool vector
	inline constexpr bool2 operator!= (int2 l, int2 r) {
		return bool2(l.x != r.x, l.y != r.y);
	}
	
	// vectors are equal, equivalent to all(l == r)
	inline constexpr bool equal (int2 l, int2 r) {
		return all(l == r);
	}
	
	// componentwise ternary (c ? l : r)
	inline constexpr int2 select (bool2 c, int2 l, int2 r) {
		return int2(c.x ? l.x : r.x, c.y ? l.y : r.y);
	}
	
	//// misc ops
	
	// componentwise absolute
	inline int2 abs (int2 v) {
		return int2(abs(v.x), abs(v.y));
	}
	
	// componentwise minimum
	inline constexpr int2 min (int2 l, int2 r) {
		return int2(min(l.x,r.x), min(l.y,r.y));
	}
	
	// componentwise maximum
	inline constexpr int2 max (int2 l, int2 r) {
		return int2(max(l.x,r.x), max(l.y,r.y));
	}
	
	// componentwise clamp into range [a,b]
	inline constexpr int2 clamp (int2 x, int2 a, int2 b) {
		return min(max(x,a), b);
	}
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	inline constexpr int2 clamp (int2 x) {
		return min(max(x, int(0)), int(1));
	}
	
	// get minimum component of vector, optionally get component index via min_index
	inline int min_component (int2 v, int* min_index) {
		int index = 0;
		int min_val = v.x;	
		for (int i=1; i<2; ++i) {
			if (v.arr[i] <= min_val) {
				index = i;
				min_val = v.arr[i];
			}
		}
		if (min_index) *min_index = index;
		return min_val;
	}
	
	// get maximum component of vector, optionally get component index via max_index
	inline int max_component (int2 v, int* max_index) {
		int index = 0;
		int max_val = v.x;	
		for (int i=1; i<2; ++i) {
			if (v.arr[i] >= max_val) {
				index = i;
				max_val = v.arr[i];
			}
		}
		if (max_index) *max_index = index;
		return max_val;
	}
	
	
	// componentwise wrap
	inline int2 wrap (int2 v, int2 range) {
		return int2(wrap(v.x,range.x), wrap(v.y,range.y));
	}
	
	// componentwise wrap
	inline int2 wrap (int2 v, int2 a, int2 b) {
		return int2(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y));
	}
	
	
	//// Vector math
	
	
	// magnitude of vector
	inline float length (int2 v) {
		return sqrt((float)(v.x * v.x + v.y * v.y));
	}
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	inline constexpr int length_sqr (int2 v) {
		return v.x * v.x + v.y * v.y;
	}
	
	// distance between points, equivalent to length(a - b)
	inline float distance (int2 a, int2 b) {
		return length(a - b);
	}
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	inline float2 normalize (int2 v) {
		return float2(v) / length(v);
	}
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	inline float2 normalizesafe (int2 v) {
		float len = length(v);
		if (len == float(0)) {
			return float(0);
		}
		return float2(v) / float2(len);
	}
	
	// dot product
	inline constexpr int dot (int2 l, int2 r) {
		return l.x * r.x + l.y * r.y;
	}
	
	// 2d cross product hack for convenient 2d stuff
	// same as cross({T.name[:-2]}3(l, 0), {T.name[:-2]}3(r, 0)).z,
	// ie. the cross product of the 2d vectors on the z=0 plane in 3d space and then return the z coord of that (signed mag of cross product)
	inline constexpr int cross (int2 l, int2 r) {
		return l.x * r.y - l.y * r.x;
	}
	
	// rotate 2d vector counterclockwise 90 deg, ie. int2(-y, x) which is fast
	inline constexpr int2 rotate90 (int2 v) {
		return int2(-v.y, v.x);
	}
}

