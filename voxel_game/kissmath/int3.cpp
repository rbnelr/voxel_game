// file was generated by kissmath.py at <TODO: add github link>
#include "int3.hpp"

#include "bool3.hpp"
#include "uint8v3.hpp"
#include "int64v3.hpp"
#include "float3.hpp"
#include "int4.hpp"
#include "int2.hpp"

namespace kissmath {
	//// forward declarations
	// typedef these because the _t suffix is kinda unwieldy when using these types often
	
	typedef uint8_t uint8;
	typedef int64_t int64;
	
	// Component indexing operator
	int& int3::operator[] (int i) {
		return arr[i];
	}
	
	// Component indexing operator
	int const& int3::operator[] (int i) const {
		return arr[i];
	}
	
	
	// uninitialized constructor
	int3::int3 () {
		
	}
	
	// extend vector
	int3::int3 (int2 xy, int z): x{xy.x}, y{xy.y}, z{z} {
		
	}
	
	// truncate vector
	int3::int3 (int4 v): x{v.x}, y{v.y}, z{v.z} {
		
	}
	
	//// Truncating cast operators
	
	
	// truncating cast operator
	int3::operator int2 () const {
		return int2(x, y);
	}
	
	//// Type cast operators
	
	
	// type cast operator
	int3::operator bool3 () const {
		return bool3((bool)x, (bool)y, (bool)z);
	}
	
	// type cast operator
	int3::operator uint8v3 () const {
		return uint8v3((uint8)x, (uint8)y, (uint8)z);
	}
	
	// type cast operator
	int3::operator int64v3 () const {
		return int64v3((int64)x, (int64)y, (int64)z);
	}
	
	// type cast operator
	int3::operator float3 () const {
		return float3((float)x, (float)y, (float)z);
	}
	
	
	// componentwise arithmetic operator
	int3 int3::operator+= (int3 r) {
		x += r.x;
		y += r.y;
		z += r.z;
		return *this;
	}
	
	// componentwise arithmetic operator
	int3 int3::operator-= (int3 r) {
		x -= r.x;
		y -= r.y;
		z -= r.z;
		return *this;
	}
	
	// componentwise arithmetic operator
	int3 int3::operator*= (int3 r) {
		x *= r.x;
		y *= r.y;
		z *= r.z;
		return *this;
	}
	
	// componentwise arithmetic operator
	int3 int3::operator/= (int3 r) {
		x /= r.x;
		y /= r.y;
		z /= r.z;
		return *this;
	}
	
	//// arthmethic ops
	
	
	int3 operator+ (int3 v) {
		return int3(+v.x, +v.y, +v.z);
	}
	
	int3 operator- (int3 v) {
		return int3(-v.x, -v.y, -v.z);
	}
	
	int3 operator+ (int3 l, int3 r) {
		return int3(l.x + r.x, l.y + r.y, l.z + r.z);
	}
	
	int3 operator- (int3 l, int3 r) {
		return int3(l.x - r.x, l.y - r.y, l.z - r.z);
	}
	
	int3 operator* (int3 l, int3 r) {
		return int3(l.x * r.x, l.y * r.y, l.z * r.z);
	}
	
	int3 operator/ (int3 l, int3 r) {
		return int3(l.x / r.x, l.y / r.y, l.z / r.z);
	}
	
	//// bitwise ops
	
	
	int3 operator~ (int3 v) {
		return int3(~v.x, ~v.y, ~v.z);
	}
	
	int3 operator& (int3 l, int3 r) {
		return int3(l.x & r.x, l.y & r.y, l.z & r.z);
	}
	
	int3 operator| (int3 l, int3 r) {
		return int3(l.x | r.x, l.y | r.y, l.z | r.z);
	}
	
	int3 operator^ (int3 l, int3 r) {
		return int3(l.x ^ r.x, l.y ^ r.y, l.z ^ r.z);
	}
	
	//// comparison ops
	
	
	// componentwise comparison returns a bool vector
	bool3 operator< (int3 l, int3 r) {
		return bool3(l.x < r.x, l.y < r.y, l.z < r.z);
	}
	
	// componentwise comparison returns a bool vector
	bool3 operator<= (int3 l, int3 r) {
		return bool3(l.x <= r.x, l.y <= r.y, l.z <= r.z);
	}
	
	// componentwise comparison returns a bool vector
	bool3 operator> (int3 l, int3 r) {
		return bool3(l.x > r.x, l.y > r.y, l.z > r.z);
	}
	
	// componentwise comparison returns a bool vector
	bool3 operator>= (int3 l, int3 r) {
		return bool3(l.x >= r.x, l.y >= r.y, l.z >= r.z);
	}
	
	// componentwise comparison returns a bool vector
	bool3 operator== (int3 l, int3 r) {
		return bool3(l.x == r.x, l.y == r.y, l.z == r.z);
	}
	
	// componentwise comparison returns a bool vector
	bool3 operator!= (int3 l, int3 r) {
		return bool3(l.x != r.x, l.y != r.y, l.z != r.z);
	}
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (int3 l, int3 r) {
		return all(l == r);
	}
	
	// componentwise ternary (c ? l : r)
	int3 select (bool3 c, int3 l, int3 r) {
		return int3(c.x ? l.x : r.x, c.y ? l.y : r.y, c.z ? l.z : r.z);
	}
	
	//// misc ops
	
	// componentwise absolute
	int3 abs (int3 v) {
		return int3(abs(v.x), abs(v.y), abs(v.z));
	}
	
	// componentwise minimum
	int3 min (int3 l, int3 r) {
		return int3(min(l.x,r.x), min(l.y,r.y), min(l.z,r.z));
	}
	
	// componentwise maximum
	int3 max (int3 l, int3 r) {
		return int3(max(l.x,r.x), max(l.y,r.y), max(l.z,r.z));
	}
	
	// componentwise clamp into range [a,b]
	int3 clamp (int3 x, int3 a, int3 b) {
		return min(max(x,a), b);
	}
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	int3 clamp (int3 x) {
		return min(max(x, int(0)), int(1));
	}
	
	// get minimum component of vector, optionally get component index via min_index
	int min_component (int3 v, int* min_index) {
		int index = 0;
		int min_val = v.x;	
		for (int i=1; i<3; ++i) {
			if (v.arr[i] <= min_val) {
				index = i;
				min_val = v.arr[i];
			}
		}
		if (min_index) *min_index = index;
		return min_val;
	}
	
	// get maximum component of vector, optionally get component index via max_index
	int max_component (int3 v, int* max_index) {
		int index = 0;
		int max_val = v.x;	
		for (int i=1; i<3; ++i) {
			if (v.arr[i] >= max_val) {
				index = i;
				max_val = v.arr[i];
			}
		}
		if (max_index) *max_index = index;
		return max_val;
	}
	
	
	// componentwise wrap
	int3 wrap (int3 v, int3 range) {
		return int3(wrap(v.x,range.x), wrap(v.y,range.y), wrap(v.z,range.z));
	}
	
	// componentwise wrap
	int3 wrap (int3 v, int3 a, int3 b) {
		return int3(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y), wrap(v.z,a.z,b.z));
	}
	
	
	//// Vector math
	
	
	// magnitude of vector
	float length (int3 v) {
		return sqrt((float)(v.x * v.x + v.y * v.y + v.z * v.z));
	}
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	int length_sqr (int3 v) {
		return v.x * v.x + v.y * v.y + v.z * v.z;
	}
	
	// distance between points, equivalent to length(a - b)
	float distance (int3 a, int3 b) {
		return length(a - b);
	}
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	float3 normalize (int3 v) {
		return float3(v) / length(v);
	}
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	float3 normalizesafe (int3 v) {
		float len = length(v);
		if (len == float(0)) {
			return float(0);
		}
		return float3(v) / float3(len);
	}
	
	// dot product
	int dot (int3 l, int3 r) {
		return l.x * r.x + l.y * r.y + l.z * r.z;
	}
	
	// 3d cross product
	int3 cross (int3 l, int3 r) {
		return int3(
					l.y * r.z - l.z * r.y,
					l.z * r.x - l.x * r.z,
					l.x * r.y - l.y * r.x);
	}
}

