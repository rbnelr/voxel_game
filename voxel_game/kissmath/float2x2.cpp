// file was generated by kissmath.py at <TODO: add github link>
#include "float2x2.hpp"

#include "float4x4.hpp"
#include "float3x4.hpp"
#include "float3x3.hpp"

namespace kissmath {
	
	//// Accessors
	
	
	// get cell with row, column indecies
	float const& float2x2::get (int r, int c) const {
		return arr[c][r];
	}
	
	// get matrix column
	float2 const& float2x2::get_column (int indx) const {
		return arr[indx];
	}
	
	// get matrix row
	float2 float2x2::get_row (int indx) const {
		return float2(arr[0][indx], arr[1][indx]);
	}
	
	//// Constructors
	
	
	// uninitialized constructor
	float2x2::float2x2 () {
		
	}
	
	// supply one value for all cells
	float2x2::float2x2 (float all): 
	arr{float2(all, all),
		float2(all, all)} {
		
	}
	
	// supply all cells, in row major order for readability -> c<row><column>
	float2x2::float2x2 (float c00, float c01,
						float c10, float c11): 
	arr{float2(c00, c10),
		float2(c01, c11)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	// supply all row vectors
	float2x2 float2x2::rows (float2 row0, float2 row1) {
		return float2x2(row0[0], row0[1],
						row1[0], row1[1]);
	}
	
	// supply all cells in row major order
	float2x2 float2x2::rows (float c00, float c01,
							 float c10, float c11) {
		return float2x2(c00, c01,
						c10, c11);
	}
	
	// supply all column vectors
	float2x2 float2x2::columns (float2 col0, float2 col1) {
		return float2x2(col0[0], col1[0],
						col0[1], col1[1]);
	}
	
	// supply all cells in column major order
	float2x2 float2x2::columns (float c00, float c10,
								float c01, float c11) {
		return float2x2(c00, c01,
						c10, c11);
	}
	
	
	// identity matrix
	float2x2 float2x2::identity () {
		return float2x2(1,0,
						0,1);
	}
	
	// Casting operators
	
	
	// extend/truncate matrix of other size
	float2x2::operator float4x4 () const {
		return float4x4(arr[0][0], arr[1][0],         0,         0,
						arr[0][1], arr[1][1],         0,         0,
						        0,         0,         1,         0,
						        0,         0,         0,         1);
	}
	
	// extend/truncate matrix of other size
	float2x2::operator float3x4 () const {
		return float3x4(arr[0][0], arr[1][0],         0,         0,
						arr[0][1], arr[1][1],         0,         0,
						        0,         0,         1,         0);
	}
	
	// extend/truncate matrix of other size
	float2x2::operator float3x3 () const {
		return float3x3(arr[0][0], arr[1][0],         0,
						arr[0][1], arr[1][1],         0,
						        0,         0,         1);
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	// add scalar to all matrix cells
	float2x2& float2x2::operator+= (float r) {
		*this = *this + r;
		return *this;
	}
	
	// substract scalar from all matrix cells
	float2x2& float2x2::operator-= (float r) {
		*this = *this - r;
		return *this;
	}
	
	// multiply scalar with all matrix cells
	float2x2& float2x2::operator*= (float r) {
		*this = *this * r;
		return *this;
	}
	
	// divide all matrix cells by scalar
	float2x2& float2x2::operator/= (float r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	// matrix-matrix muliplication
	float2x2& float2x2::operator*= (float2x2 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	
	// componentwise matrix_cell + matrix_cell
	float2x2 operator+ (float2x2 const& l, float2x2 const& r) {
		return float2x2(l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0],
						l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1]);
	}
	
	// componentwise matrix_cell + scalar
	float2x2 operator+ (float2x2 const& l, float r) {
		return float2x2(l.arr[0][0] + r, l.arr[1][0] + r,
						l.arr[0][1] + r, l.arr[1][1] + r);
	}
	
	// componentwise scalar + matrix_cell
	float2x2 operator+ (float l, float2x2 const& r) {
		return float2x2(l + r.arr[0][0], l + r.arr[1][0],
						l + r.arr[0][1], l + r.arr[1][1]);
	}
	
	
	// componentwise matrix_cell - matrix_cell
	float2x2 operator- (float2x2 const& l, float2x2 const& r) {
		return float2x2(l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0],
						l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1]);
	}
	
	// componentwise matrix_cell - scalar
	float2x2 operator- (float2x2 const& l, float r) {
		return float2x2(l.arr[0][0] - r, l.arr[1][0] - r,
						l.arr[0][1] - r, l.arr[1][1] - r);
	}
	
	// componentwise scalar - matrix_cell
	float2x2 operator- (float l, float2x2 const& r) {
		return float2x2(l - r.arr[0][0], l - r.arr[1][0],
						l - r.arr[0][1], l - r.arr[1][1]);
	}
	
	
	// componentwise matrix_cell * matrix_cell
	float2x2 mul_componentwise (float2x2 const& l, float2x2 const& r) {
		return float2x2(l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0],
						l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1]);
	}
	
	// componentwise matrix_cell * scalar
	float2x2 operator* (float2x2 const& l, float r) {
		return float2x2(l.arr[0][0] * r, l.arr[1][0] * r,
						l.arr[0][1] * r, l.arr[1][1] * r);
	}
	
	// componentwise scalar * matrix_cell
	float2x2 operator* (float l, float2x2 const& r) {
		return float2x2(l * r.arr[0][0], l * r.arr[1][0],
						l * r.arr[0][1], l * r.arr[1][1]);
	}
	
	
	// componentwise matrix_cell / matrix_cell
	float2x2 div_componentwise (float2x2 const& l, float2x2 const& r) {
		return float2x2(l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0],
						l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1]);
	}
	
	// componentwise matrix_cell / scalar
	float2x2 operator/ (float2x2 const& l, float r) {
		return float2x2(l.arr[0][0] / r, l.arr[1][0] / r,
						l.arr[0][1] / r, l.arr[1][1] / r);
	}
	
	// componentwise scalar / matrix_cell
	float2x2 operator/ (float l, float2x2 const& r) {
		return float2x2(l / r.arr[0][0], l / r.arr[1][0],
						l / r.arr[0][1], l / r.arr[1][1]);
	}
	
	// Matrix ops
	
	
	// matrix-matrix multiply
	float2x2 operator* (float2x2 const& l, float2x2 const& r) {
		float2x2 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		return ret;
	}
	
	// matrix-vector multiply
	float2 operator* (float2x2 const& l, float2 r) {
		float2 ret;
		ret[0] = l.arr[0].x * r.x + l.arr[1].x * r.y;
		ret[1] = l.arr[0].y * r.x + l.arr[1].y * r.y;
		return ret;
	}
	
	// vector-matrix multiply
	float2 operator* (float2 l, float2x2 const& r) {
		float2 ret;
		ret[0] = l.x * r.arr[0].x + l.y * r.arr[0].y;
		ret[1] = l.x * r.arr[1].x + l.y * r.arr[1].y;
		return ret;
	}
	
	float2x2 transpose (float2x2 const& m) {
		return float2x2::rows(m.arr[0], m.arr[1]);
	}
	
	#define LETTERIFY \
	float a = mat.arr[0][0]; \
	float b = mat.arr[0][1]; \
	float c = mat.arr[1][0]; \
	float d = mat.arr[1][1];
	
	float determinant (float2x2 const& mat) {
		LETTERIFY
		
		return a*d - b*c;
	}
	
	float2x2 inverse (float2x2 const& mat) {
		LETTERIFY
		
		float det;
		{ // clac determinate
			det = a*d - b*c;
		}
		// calc cofactor matrix
		
		float cofac_00 = d;
		float cofac_01 = c;
		float cofac_10 = b;
		float cofac_11 = a;
		
		float2x2 ret;
		
		float inv_det = float(1) / det;
		float ninv_det = -inv_det;
		
		ret.arr[0][0] = cofac_00 *  inv_det;
		ret.arr[0][1] = cofac_10 * ninv_det;
		ret.arr[1][0] = cofac_01 * ninv_det;
		ret.arr[1][1] = cofac_11 *  inv_det;
		
		return ret;
	}
	
	#undef LETTERIFY
	
}

