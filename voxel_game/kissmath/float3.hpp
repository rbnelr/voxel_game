// file was generated by kissmath.py at <TODO: add github link>
#pragma once

////// Forward declarations

#include "float.hpp"

namespace kissmath {
	//// forward declarations
	
	struct bool3;
	struct int64v3;
	struct float4;
	struct uint8v3;
	struct float2;
	struct int3;
	
	struct float3 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				float	x, y, z;
			};
			float		arr[3];
		};
		
		// Component indexing operator
		inline constexpr float& operator[] (int i);
		
		// Component indexing operator
		inline constexpr float const& operator[] (int i) const;
		
		
		// uninitialized constructor
		inline float3 () = default;
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		inline constexpr float3 (float all);
		
		// supply all components
		inline constexpr float3 (float x, float y, float z);
		
		// extend vector
		inline constexpr float3 (float2 xy, float z);
		
		// truncate vector
		inline constexpr float3 (float4 v);
		
		
		//// Truncating cast operators
		
		// truncating cast operator
		inline constexpr explicit operator float2 () const;
		
		
		//// Type cast operators
		
		// type cast operator
		inline constexpr explicit operator bool3 () const;
		
		// type cast operator
		inline constexpr explicit operator int3 () const;
		
		// type cast operator
		inline constexpr explicit operator int64v3 () const;
		
		// type cast operator
		inline constexpr explicit operator uint8v3 () const;
		
		
		// componentwise arithmetic operator
		inline float3 operator+= (float3 r);
		
		// componentwise arithmetic operator
		inline float3 operator-= (float3 r);
		
		// componentwise arithmetic operator
		inline float3 operator*= (float3 r);
		
		// componentwise arithmetic operator
		inline float3 operator/= (float3 r);
		
	};
	
	//// arthmethic ops
	
	inline constexpr float3 operator+ (float3 v);
	
	inline constexpr float3 operator- (float3 v);
	
	inline constexpr float3 operator+ (float3 l, float3 r);
	
	inline constexpr float3 operator- (float3 l, float3 r);
	
	inline constexpr float3 operator* (float3 l, float3 r);
	
	inline constexpr float3 operator/ (float3 l, float3 r);
	
	
	//// bitwise ops
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	inline constexpr bool3 operator< (float3 l, float3 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool3 operator<= (float3 l, float3 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool3 operator> (float3 l, float3 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool3 operator>= (float3 l, float3 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool3 operator== (float3 l, float3 r);
	
	// componentwise comparison returns a bool vector
	inline constexpr bool3 operator!= (float3 l, float3 r);
	
	// vectors are equal, equivalent to all(l == r)
	inline constexpr bool equal (float3 l, float3 r);
	
	// componentwise ternary (c ? l : r)
	inline constexpr float3 select (bool3 c, float3 l, float3 r);
	
	
	//// misc ops
	// componentwise absolute
	inline float3 abs (float3 v);
	
	// componentwise minimum
	inline constexpr float3 min (float3 l, float3 r);
	
	// componentwise maximum
	inline constexpr float3 max (float3 l, float3 r);
	
	// componentwise clamp into range [a,b]
	inline constexpr float3 clamp (float3 x, float3 a, float3 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	inline constexpr float3 clamp (float3 x);
	
	// get minimum component of vector, optionally get component index via min_index
	inline float min_component (float3 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	inline float max_component (float3 v, int* max_index=nullptr);
	
	
	// componentwise floor
	inline float3 floor (float3 v);
	
	// componentwise ceil
	inline float3 ceil (float3 v);
	
	// componentwise round
	inline float3 round (float3 v);
	
	// componentwise floor to int
	inline int3 floori (float3 v);
	
	// componentwise ceil to int
	inline int3 ceili (float3 v);
	
	// componentwise round to int
	inline int3 roundi (float3 v);
	
	// componentwise pow
	inline float3 pow (float3 v, float3 e);
	
	// componentwise wrap
	inline float3 wrap (float3 v, float3 range);
	
	// componentwise wrap
	inline float3 wrap (float3 v, float3 a, float3 b);
	
	
	
	//// Angle conversion
	
	// converts degrees to radiants
	inline constexpr float3 to_radians (float3 deg);
	
	// converts radiants to degrees
	inline constexpr float3 to_degrees (float3 rad);
	
	// converts degrees to radiants
	// shortform to make degree literals more readable
	inline constexpr float3 deg (float3 deg);
	
	//// Linear interpolation
	
	// linear interpolation
	// like getting the output of a linear function
	// ex. t=0 -> a ; t=1 -> b ; t=0.5 -> (a+b)/2
	inline constexpr float3 lerp (float3 a, float3 b, float3 t);
	
	// linear mapping
	// sometimes called inverse linear interpolation
	// like getting the x for a y on a linear function
	// ex. map(70, 0,100) -> 0.7 ; map(0.5, -1,+1) -> 0.75
	inline constexpr float3 map (float3 x, float3 in_a, float3 in_b);
	
	// linear remapping
	// equivalent of lerp(out_a, out_b, map(x, in_a, in_b))
	inline constexpr float3 map (float3 x, float3 in_a, float3 in_b, float3 out_a, float3 out_b);
	
	
	//// Various interpolation
	
	// standard smoothstep interpolation
	inline float3 smoothstep (float3 x);
	
	// 3 point bezier interpolation
	inline float3 bezier (float3 a, float3 b, float3 c, float t);
	
	// 4 point bezier interpolation
	inline float3 bezier (float3 a, float3 b, float3 c, float3 d, float t);
	
	// 5 point bezier interpolation
	inline float3 bezier (float3 a, float3 b, float3 c, float3 d, float3 e, float t);
	
	
	//// Vector math
	
	// magnitude of vector
	inline float length (float3 v);
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	inline constexpr float length_sqr (float3 v);
	
	// distance between points, equivalent to length(a - b)
	inline float distance (float3 a, float3 b);
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	inline float3 normalize (float3 v);
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	inline float3 normalizesafe (float3 v);
	
	// dot product
	inline constexpr float dot (float3 l, float3 r);
	
	// 3d cross product
	inline constexpr float3 cross (float3 l, float3 r);
	
}


#include "float3.inl"
