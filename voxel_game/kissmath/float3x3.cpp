// file was generated by kissmath.py at <TODO: add github link>
#include "float3x3.hpp"

#include "float4x4.hpp"
#include "float3x4.hpp"
#include "float2x2.hpp"

namespace kissmath {
	
	//// Accessors
	
	
	// get cell with row, column indecies
	float const& float3x3::get (int r, int c) const {
		return arr[c][r];
	}
	
	// get matrix column
	float3 const& float3x3::get_column (int indx) const {
		return arr[indx];
	}
	
	// get matrix row
	float3 float3x3::get_row (int indx) const {
		return float3(arr[0][indx], arr[1][indx], arr[2][indx]);
	}
	
	//// Constructors
	
	
	// uninitialized constructor
	float3x3::float3x3 () {
		
	}
	
	// supply one value for all cells
	float3x3::float3x3 (float all): 
	arr{float3(all, all, all),
		float3(all, all, all),
		float3(all, all, all)} {
		
	}
	
	// supply all cells, in row major order for readability -> c<row><column>
	//float3x3::float3x3 (float c00, float c01, float c02,
	//					float c10, float c11, float c12,
	//					float c20, float c21, float c22): 
	//arr{float3(c00, c10, c20),
	//	float3(c01, c11, c21),
	//	float3(c02, c12, c22)} {
	//	
	//}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	// supply all row vectors
	float3x3 float3x3::rows (float3 row0, float3 row1, float3 row2) {
		return float3x3(row0[0], row0[1], row0[2],
						row1[0], row1[1], row1[2],
						row2[0], row2[1], row2[2]);
	}
	
	// supply all cells in row major order
	float3x3 float3x3::rows (float c00, float c01, float c02,
							 float c10, float c11, float c12,
							 float c20, float c21, float c22) {
		return float3x3(c00, c01, c02,
						c10, c11, c12,
						c20, c21, c22);
	}
	
	// supply all column vectors
	float3x3 float3x3::columns (float3 col0, float3 col1, float3 col2) {
		return float3x3(col0[0], col1[0], col2[0],
						col0[1], col1[1], col2[1],
						col0[2], col1[2], col2[2]);
	}
	
	// supply all cells in column major order
	float3x3 float3x3::columns (float c00, float c10, float c20,
								float c01, float c11, float c21,
								float c02, float c12, float c22) {
		return float3x3(c00, c01, c02,
						c10, c11, c12,
						c20, c21, c22);
	}
	
	
	// identity matrix
	//float3x3 float3x3::identity () {
	//	return float3x3(1,0,0,
	//					0,1,0,
	//					0,0,1);
	//}
	
	// Casting operators
	
	
	// extend/truncate matrix of other size
	float3x3::operator float4x4 () const {
		return float4x4(arr[0][0], arr[1][0], arr[2][0],         0,
						arr[0][1], arr[1][1], arr[2][1],         0,
						arr[0][2], arr[1][2], arr[2][2],         0,
						        0,         0,         0,         1);
	}
	
	// extend/truncate matrix of other size
	float3x3::operator float3x4 () const {
		return float3x4(arr[0][0], arr[1][0], arr[2][0],         0,
						arr[0][1], arr[1][1], arr[2][1],         0,
						arr[0][2], arr[1][2], arr[2][2],         0);
	}
	
	// extend/truncate matrix of other size
	float3x3::operator float2x2 () const {
		return float2x2(arr[0][0], arr[1][0],
						arr[0][1], arr[1][1]);
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	// add scalar to all matrix cells
	float3x3& float3x3::operator+= (float r) {
		*this = *this + r;
		return *this;
	}
	
	// substract scalar from all matrix cells
	float3x3& float3x3::operator-= (float r) {
		*this = *this - r;
		return *this;
	}
	
	// multiply scalar with all matrix cells
	float3x3& float3x3::operator*= (float r) {
		*this = *this * r;
		return *this;
	}
	
	// divide all matrix cells by scalar
	float3x3& float3x3::operator/= (float r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	// matrix-matrix muliplication
	float3x3& float3x3::operator*= (float3x3 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	
	// componentwise matrix_cell + matrix_cell
	float3x3 operator+ (float3x3 const& l, float3x3 const& r) {
		return float3x3(l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0],
						l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1],
						l.arr[0][2] + r.arr[0][2], l.arr[1][2] + r.arr[1][2], l.arr[2][2] + r.arr[2][2]);
	}
	
	// componentwise matrix_cell + scalar
	float3x3 operator+ (float3x3 const& l, float r) {
		return float3x3(l.arr[0][0] + r, l.arr[1][0] + r, l.arr[2][0] + r,
						l.arr[0][1] + r, l.arr[1][1] + r, l.arr[2][1] + r,
						l.arr[0][2] + r, l.arr[1][2] + r, l.arr[2][2] + r);
	}
	
	// componentwise scalar + matrix_cell
	float3x3 operator+ (float l, float3x3 const& r) {
		return float3x3(l + r.arr[0][0], l + r.arr[1][0], l + r.arr[2][0],
						l + r.arr[0][1], l + r.arr[1][1], l + r.arr[2][1],
						l + r.arr[0][2], l + r.arr[1][2], l + r.arr[2][2]);
	}
	
	
	// componentwise matrix_cell - matrix_cell
	float3x3 operator- (float3x3 const& l, float3x3 const& r) {
		return float3x3(l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0],
						l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1],
						l.arr[0][2] - r.arr[0][2], l.arr[1][2] - r.arr[1][2], l.arr[2][2] - r.arr[2][2]);
	}
	
	// componentwise matrix_cell - scalar
	float3x3 operator- (float3x3 const& l, float r) {
		return float3x3(l.arr[0][0] - r, l.arr[1][0] - r, l.arr[2][0] - r,
						l.arr[0][1] - r, l.arr[1][1] - r, l.arr[2][1] - r,
						l.arr[0][2] - r, l.arr[1][2] - r, l.arr[2][2] - r);
	}
	
	// componentwise scalar - matrix_cell
	float3x3 operator- (float l, float3x3 const& r) {
		return float3x3(l - r.arr[0][0], l - r.arr[1][0], l - r.arr[2][0],
						l - r.arr[0][1], l - r.arr[1][1], l - r.arr[2][1],
						l - r.arr[0][2], l - r.arr[1][2], l - r.arr[2][2]);
	}
	
	
	// componentwise matrix_cell * matrix_cell
	float3x3 mul_componentwise (float3x3 const& l, float3x3 const& r) {
		return float3x3(l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0],
						l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1],
						l.arr[0][2] * r.arr[0][2], l.arr[1][2] * r.arr[1][2], l.arr[2][2] * r.arr[2][2]);
	}
	
	// componentwise matrix_cell * scalar
	float3x3 operator* (float3x3 const& l, float r) {
		return float3x3(l.arr[0][0] * r, l.arr[1][0] * r, l.arr[2][0] * r,
						l.arr[0][1] * r, l.arr[1][1] * r, l.arr[2][1] * r,
						l.arr[0][2] * r, l.arr[1][2] * r, l.arr[2][2] * r);
	}
	
	// componentwise scalar * matrix_cell
	float3x3 operator* (float l, float3x3 const& r) {
		return float3x3(l * r.arr[0][0], l * r.arr[1][0], l * r.arr[2][0],
						l * r.arr[0][1], l * r.arr[1][1], l * r.arr[2][1],
						l * r.arr[0][2], l * r.arr[1][2], l * r.arr[2][2]);
	}
	
	
	// componentwise matrix_cell / matrix_cell
	float3x3 div_componentwise (float3x3 const& l, float3x3 const& r) {
		return float3x3(l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0],
						l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1],
						l.arr[0][2] / r.arr[0][2], l.arr[1][2] / r.arr[1][2], l.arr[2][2] / r.arr[2][2]);
	}
	
	// componentwise matrix_cell / scalar
	float3x3 operator/ (float3x3 const& l, float r) {
		return float3x3(l.arr[0][0] / r, l.arr[1][0] / r, l.arr[2][0] / r,
						l.arr[0][1] / r, l.arr[1][1] / r, l.arr[2][1] / r,
						l.arr[0][2] / r, l.arr[1][2] / r, l.arr[2][2] / r);
	}
	
	// componentwise scalar / matrix_cell
	float3x3 operator/ (float l, float3x3 const& r) {
		return float3x3(l / r.arr[0][0], l / r.arr[1][0], l / r.arr[2][0],
						l / r.arr[0][1], l / r.arr[1][1], l / r.arr[2][1],
						l / r.arr[0][2], l / r.arr[1][2], l / r.arr[2][2]);
	}
	
	// Matrix ops
	
	
	// matrix-matrix multiply
	float3x3 operator* (float3x3 const& l, float3x3 const& r) {
		float3x3 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		return ret;
	}
	
	// matrix-vector multiply
	float3 operator* (float3x3 const& l, float3 r) {
		float3 ret;
		ret[0] = l.arr[0].x * r.x + l.arr[1].x * r.y + l.arr[2].x * r.z;
		ret[1] = l.arr[0].y * r.x + l.arr[1].y * r.y + l.arr[2].y * r.z;
		ret[2] = l.arr[0].z * r.x + l.arr[1].z * r.y + l.arr[2].z * r.z;
		return ret;
	}
	
	// vector-matrix multiply
	float3 operator* (float3 l, float3x3 const& r) {
		float3 ret;
		ret[0] = l.x * r.arr[0].x + l.y * r.arr[0].y + l.z * r.arr[0].z;
		ret[1] = l.x * r.arr[1].x + l.y * r.arr[1].y + l.z * r.arr[1].z;
		ret[2] = l.x * r.arr[2].x + l.y * r.arr[2].y + l.z * r.arr[2].z;
		return ret;
	}
	
	float3x3 transpose (float3x3 const& m) {
		return float3x3::rows(m.arr[0], m.arr[1], m.arr[2]);
	}
	
	#define LETTERIFY \
	float a = mat.arr[0][0]; \
	float b = mat.arr[0][1]; \
	float c = mat.arr[0][2]; \
	float d = mat.arr[1][0]; \
	float e = mat.arr[1][1]; \
	float f = mat.arr[1][2]; \
	float g = mat.arr[2][0]; \
	float h = mat.arr[2][1]; \
	float i = mat.arr[2][2];
	
	float determinant (float3x3 const& mat) {
		LETTERIFY
		
		return +a*(e*i - f*h) -b*(d*i - f*g) +c*(d*h - e*g);
	}
	
	float3x3 inverse (float3x3 const& mat) {
		LETTERIFY
		
		float det;
		{ // clac determinate
			det = +a*(e*i - f*h) -b*(d*i - f*g) +c*(d*h - e*g);
		}
		// calc cofactor matrix
		
		float cofac_00 = e*i - f*h;
		float cofac_01 = d*i - f*g;
		float cofac_02 = d*h - e*g;
		float cofac_10 = b*i - c*h;
		float cofac_11 = a*i - c*g;
		float cofac_12 = a*h - b*g;
		float cofac_20 = b*f - c*e;
		float cofac_21 = a*f - c*d;
		float cofac_22 = a*e - b*d;
		
		float3x3 ret;
		
		float inv_det = float(1) / det;
		float ninv_det = -inv_det;
		
		ret.arr[0][0] = cofac_00 *  inv_det;
		ret.arr[0][1] = cofac_10 * ninv_det;
		ret.arr[0][2] = cofac_20 *  inv_det;
		ret.arr[1][0] = cofac_01 * ninv_det;
		ret.arr[1][1] = cofac_11 *  inv_det;
		ret.arr[1][2] = cofac_21 * ninv_det;
		ret.arr[2][0] = cofac_02 *  inv_det;
		ret.arr[2][1] = cofac_12 * ninv_det;
		ret.arr[2][2] = cofac_22 *  inv_det;
		
		return ret;
	}
	
	#undef LETTERIFY
	
}

