// file was generated by kissmath.py at <TODO: add github link>
#include "float3x4.hpp"

#include "float4x4.hpp"
#include "float2x2.hpp"
#include "float3x3.hpp"

namespace kissmath {
	
	//// Accessors
	
	
	// get cell with row, column indecies
	float const& float3x4::get (int r, int c) const {
		return arr[c][r];
	}
	
	// get matrix column
	float3 const& float3x4::get_column (int indx) const {
		return arr[indx];
	}
	
	// get matrix row
	float4 float3x4::get_row (int indx) const {
		return float4(arr[0][indx], arr[1][indx], arr[2][indx], arr[3][indx]);
	}
	
	//// Constructors
	
	
	// uninitialized constructor
	float3x4::float3x4 () {
		
	}
	
	// supply one value for all cells
	float3x4::float3x4 (float all): 
	arr{float3(all, all, all),
		float3(all, all, all),
		float3(all, all, all),
		float3(all, all, all)} {
		
	}
	
	// supply all cells, in row major order for readability -> c<row><column>
	float3x4::float3x4 (float c00, float c01, float c02, float c03,
						float c10, float c11, float c12, float c13,
						float c20, float c21, float c22, float c23): 
	arr{float3(c00, c10, c20),
		float3(c01, c11, c21),
		float3(c02, c12, c22),
		float3(c03, c13, c23)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	// supply all row vectors
	float3x4 float3x4::rows (float4 row0, float4 row1, float4 row2) {
		return float3x4(row0[0], row0[1], row0[2], row0[3],
						row1[0], row1[1], row1[2], row1[3],
						row2[0], row2[1], row2[2], row2[3]);
	}
	
	// supply all cells in row major order
	float3x4 float3x4::rows (float c00, float c01, float c02, float c03,
							 float c10, float c11, float c12, float c13,
							 float c20, float c21, float c22, float c23) {
		return float3x4(c00, c01, c02, c03,
						c10, c11, c12, c13,
						c20, c21, c22, c23);
	}
	
	// supply all column vectors
	float3x4 float3x4::columns (float3 col0, float3 col1, float3 col2, float3 col3) {
		return float3x4(col0[0], col1[0], col2[0], col3[0],
						col0[1], col1[1], col2[1], col3[1],
						col0[2], col1[2], col2[2], col3[2]);
	}
	
	// supply all cells in column major order
	float3x4 float3x4::columns (float c00, float c10, float c20,
								float c01, float c11, float c21,
								float c02, float c12, float c22,
								float c03, float c13, float c23) {
		return float3x4(c00, c01, c02, c03,
						c10, c11, c12, c13,
						c20, c21, c22, c23);
	}
	
	
	// identity matrix
	float3x4 float3x4::identity () {
		return float3x4(1,0,0,0,
						0,1,0,0,
						0,0,1,0);
	}
	
	// Casting operators
	
	
	// extend/truncate matrix of other size
	float3x4::operator float4x4 () const {
		return float4x4(arr[0][0], arr[1][0], arr[2][0], arr[3][0],
						arr[0][1], arr[1][1], arr[2][1], arr[3][1],
						arr[0][2], arr[1][2], arr[2][2], arr[3][2],
						        0,         0,         0,         1);
	}
	
	// extend/truncate matrix of other size
	float3x4::operator float2x2 () const {
		return float2x2(arr[0][0], arr[1][0],
						arr[0][1], arr[1][1]);
	}
	
	// extend/truncate matrix of other size
	float3x4::operator float3x3 () const {
		return float3x3(arr[0][0], arr[1][0], arr[2][0],
						arr[0][1], arr[1][1], arr[2][1],
						arr[0][2], arr[1][2], arr[2][2]);
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	// add scalar to all matrix cells
	float3x4& float3x4::operator+= (float r) {
		*this = *this + r;
		return *this;
	}
	
	// substract scalar from all matrix cells
	float3x4& float3x4::operator-= (float r) {
		*this = *this - r;
		return *this;
	}
	
	// multiply scalar with all matrix cells
	float3x4& float3x4::operator*= (float r) {
		*this = *this * r;
		return *this;
	}
	
	// divide all matrix cells by scalar
	float3x4& float3x4::operator/= (float r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	// matrix-matrix muliplication
	float3x4& float3x4::operator*= (float3x4 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	
	// componentwise matrix_cell + matrix_cell
	float3x4 operator+ (float3x4 const& l, float3x4 const& r) {
		return float3x4(l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0], l.arr[3][0] + r.arr[3][0],
						l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1], l.arr[3][1] + r.arr[3][1],
						l.arr[0][2] + r.arr[0][2], l.arr[1][2] + r.arr[1][2], l.arr[2][2] + r.arr[2][2], l.arr[3][2] + r.arr[3][2]);
	}
	
	// componentwise matrix_cell + scalar
	float3x4 operator+ (float3x4 const& l, float r) {
		return float3x4(l.arr[0][0] + r, l.arr[1][0] + r, l.arr[2][0] + r, l.arr[3][0] + r,
						l.arr[0][1] + r, l.arr[1][1] + r, l.arr[2][1] + r, l.arr[3][1] + r,
						l.arr[0][2] + r, l.arr[1][2] + r, l.arr[2][2] + r, l.arr[3][2] + r);
	}
	
	// componentwise scalar + matrix_cell
	float3x4 operator+ (float l, float3x4 const& r) {
		return float3x4(l + r.arr[0][0], l + r.arr[1][0], l + r.arr[2][0], l + r.arr[3][0],
						l + r.arr[0][1], l + r.arr[1][1], l + r.arr[2][1], l + r.arr[3][1],
						l + r.arr[0][2], l + r.arr[1][2], l + r.arr[2][2], l + r.arr[3][2]);
	}
	
	
	// componentwise matrix_cell - matrix_cell
	float3x4 operator- (float3x4 const& l, float3x4 const& r) {
		return float3x4(l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0], l.arr[3][0] - r.arr[3][0],
						l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1], l.arr[3][1] - r.arr[3][1],
						l.arr[0][2] - r.arr[0][2], l.arr[1][2] - r.arr[1][2], l.arr[2][2] - r.arr[2][2], l.arr[3][2] - r.arr[3][2]);
	}
	
	// componentwise matrix_cell - scalar
	float3x4 operator- (float3x4 const& l, float r) {
		return float3x4(l.arr[0][0] - r, l.arr[1][0] - r, l.arr[2][0] - r, l.arr[3][0] - r,
						l.arr[0][1] - r, l.arr[1][1] - r, l.arr[2][1] - r, l.arr[3][1] - r,
						l.arr[0][2] - r, l.arr[1][2] - r, l.arr[2][2] - r, l.arr[3][2] - r);
	}
	
	// componentwise scalar - matrix_cell
	float3x4 operator- (float l, float3x4 const& r) {
		return float3x4(l - r.arr[0][0], l - r.arr[1][0], l - r.arr[2][0], l - r.arr[3][0],
						l - r.arr[0][1], l - r.arr[1][1], l - r.arr[2][1], l - r.arr[3][1],
						l - r.arr[0][2], l - r.arr[1][2], l - r.arr[2][2], l - r.arr[3][2]);
	}
	
	
	// componentwise matrix_cell * matrix_cell
	float3x4 mul_componentwise (float3x4 const& l, float3x4 const& r) {
		return float3x4(l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0], l.arr[3][0] * r.arr[3][0],
						l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1], l.arr[3][1] * r.arr[3][1],
						l.arr[0][2] * r.arr[0][2], l.arr[1][2] * r.arr[1][2], l.arr[2][2] * r.arr[2][2], l.arr[3][2] * r.arr[3][2]);
	}
	
	// componentwise matrix_cell * scalar
	float3x4 operator* (float3x4 const& l, float r) {
		return float3x4(l.arr[0][0] * r, l.arr[1][0] * r, l.arr[2][0] * r, l.arr[3][0] * r,
						l.arr[0][1] * r, l.arr[1][1] * r, l.arr[2][1] * r, l.arr[3][1] * r,
						l.arr[0][2] * r, l.arr[1][2] * r, l.arr[2][2] * r, l.arr[3][2] * r);
	}
	
	// componentwise scalar * matrix_cell
	float3x4 operator* (float l, float3x4 const& r) {
		return float3x4(l * r.arr[0][0], l * r.arr[1][0], l * r.arr[2][0], l * r.arr[3][0],
						l * r.arr[0][1], l * r.arr[1][1], l * r.arr[2][1], l * r.arr[3][1],
						l * r.arr[0][2], l * r.arr[1][2], l * r.arr[2][2], l * r.arr[3][2]);
	}
	
	
	// componentwise matrix_cell / matrix_cell
	float3x4 div_componentwise (float3x4 const& l, float3x4 const& r) {
		return float3x4(l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0], l.arr[3][0] / r.arr[3][0],
						l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1], l.arr[3][1] / r.arr[3][1],
						l.arr[0][2] / r.arr[0][2], l.arr[1][2] / r.arr[1][2], l.arr[2][2] / r.arr[2][2], l.arr[3][2] / r.arr[3][2]);
	}
	
	// componentwise matrix_cell / scalar
	float3x4 operator/ (float3x4 const& l, float r) {
		return float3x4(l.arr[0][0] / r, l.arr[1][0] / r, l.arr[2][0] / r, l.arr[3][0] / r,
						l.arr[0][1] / r, l.arr[1][1] / r, l.arr[2][1] / r, l.arr[3][1] / r,
						l.arr[0][2] / r, l.arr[1][2] / r, l.arr[2][2] / r, l.arr[3][2] / r);
	}
	
	// componentwise scalar / matrix_cell
	float3x4 operator/ (float l, float3x4 const& r) {
		return float3x4(l / r.arr[0][0], l / r.arr[1][0], l / r.arr[2][0], l / r.arr[3][0],
						l / r.arr[0][1], l / r.arr[1][1], l / r.arr[2][1], l / r.arr[3][1],
						l / r.arr[0][2], l / r.arr[1][2], l / r.arr[2][2], l / r.arr[3][2]);
	}
	
	// Matrix ops
	
	
	// matrix-matrix multiply
	float3x4 operator* (float3x3 const& l, float3x4 const& r) {
		float3x4 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		ret.arr[3] = l * r.arr[3];
		return ret;
	}
	
	// matrix-matrix multiply
	float3x4 operator* (float3x4 const& l, float4x4 const& r) {
		float3x4 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		ret.arr[3] = l * r.arr[3];
		return ret;
	}
	
	// matrix-vector multiply
	float3 operator* (float3x4 const& l, float4 r) {
		float3 ret;
		ret[0] = l.arr[0].x * r.x + l.arr[1].x * r.y + l.arr[2].x * r.z + l.arr[3].x * r.w;
		ret[1] = l.arr[0].y * r.x + l.arr[1].y * r.y + l.arr[2].y * r.z + l.arr[3].y * r.w;
		ret[2] = l.arr[0].z * r.x + l.arr[1].z * r.y + l.arr[2].z * r.z + l.arr[3].z * r.w;
		return ret;
	}
	
	// vector-matrix multiply
	float4 operator* (float3 l, float3x4 const& r) {
		float4 ret;
		ret[0] = l.x * r.arr[0].x + l.y * r.arr[0].y + l.z * r.arr[0].z;
		ret[1] = l.x * r.arr[1].x + l.y * r.arr[1].y + l.z * r.arr[1].z;
		ret[2] = l.x * r.arr[2].x + l.y * r.arr[2].y + l.z * r.arr[2].z;
		ret[3] = l.x * r.arr[3].x + l.y * r.arr[3].y + l.z * r.arr[3].z;
		return ret;
	}
	
	// Matrix operation shortforms so that you can treat a 3x4 matrix as a 3x3 matrix plus translation
	
	
	// shortform for float3x4 * (float4x4)float3x3
	float3x4 operator* (float3x4 const& l, float3x3 const& r) {
		return l * (float4x4)r;
	}
	
	// shortform for float3x4 * (float4x4)float3x4
	float3x4 operator* (float3x4 const& l, float3x4 const& r) {
		return l * (float4x4)r;
	}
	
	// shortform for float3x4 * float4(float3, 1)
	float3 operator* (float3x4 const& l, float3 r) {
		return l * float4(r, 1);
	}
}

