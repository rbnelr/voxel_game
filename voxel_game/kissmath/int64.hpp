// file was generated by kissmath.py at <TODO: add github link>
#pragma once

#include <cmath>
#include <cstdint>

namespace kissmath {
	typedef int64_t int64; // typedef this because the _t suffix is kinda unwieldy when using these types often
	
	// Use std math functions for these
	using std::abs;
	using std::floor;
	using std::ceil;
	using std::pow;
	using std::round;
	
	// wrap x into range [0,range)
	// negative x wrap back to +range unlike c++ % operator
	// negative range supported
	int64 wrap (int64 x, int64 range);
	
	// wrap x into [a,b) range
	int64 wrap (int64 x, int64 a, int64 b);
	
	// clamp x into range [a, b]
	// equivalent to min(max(x,a), b)
	int64 clamp (int64 x, int64 a, int64 b);
	
	// clamp x into range [0, 1]
	// also known as saturate in hlsl
	int64 clamp (int64 x);
	
	// returns the greater value of a and b
	int64 min (int64 l, int64 r);
	
	// returns the smaller value of a and b
	int64 max (int64 l, int64 r);
	
	// equivalent to ternary c ? l : r
	// for conformity with vectors
	int64 select (bool c, int64 l, int64 r);
	
	
	// length(scalar) = abs(scalar)
	// for conformity with vectors
	int64 length (int64 x);
	
	// length_sqr(scalar) = abs(scalar)^2
	// for conformity with vectors (for vectors this func is preferred over length to avoid the sqrt)
	int64 length_sqr (int64 x);
	
	// scalar normalize for conformity with vectors
	// normalize(-6.2f) = -1f, normalize(7) = 1, normalize(0) = <div 0>
	// can be useful in some cases
	int64 normalize (int64 x);
	
	// normalize(x) for length(x) != 0 else 0
	int64 normalizesafe (int64 x);
	
	
}

