// file was generated by kissmath.py at <TODO: add github link>
#pragma once

#include "int.hpp"

namespace kissmath {
	//// forward declarations
	
	struct int64v4;
	struct bool4;
	struct uint8v4;
	struct float4;
	struct int3;
	struct int2;
	
	struct int4 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				int	x, y, z, w;
			};
			int		arr[4];
		};
		
		// Component indexing operator
		int& operator[] (int i);
		
		// Component indexing operator
		int const& operator[] (int i) const;
		
		
		// uninitialized constructor
		int4 ();
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		int4 (int all);
		
		// supply all components
		int4 (int x, int y, int z, int w);
		
		// extend vector
		int4 (int2 xy, int z, int w);
		
		// extend vector
		int4 (int3 xyz, int w);
		
		
		//// Truncating cast operators
		
		// truncating cast operator
		explicit operator int2 () const;
		
		// truncating cast operator
		explicit operator int3 () const;
		
		
		//// Type cast operators
		
		// type cast operator
		explicit operator int64v4 () const;
		
		// type cast operator
		explicit operator bool4 () const;
		
		// type cast operator
		explicit operator uint8v4 () const;
		
		// type cast operator
		explicit operator float4 () const;
		
		
		// componentwise arithmetic operator
		int4 operator+= (int4 r);
		
		// componentwise arithmetic operator
		int4 operator-= (int4 r);
		
		// componentwise arithmetic operator
		int4 operator*= (int4 r);
		
		// componentwise arithmetic operator
		int4 operator/= (int4 r);
		
	};
	
	//// arthmethic ops
	
	int4 operator+ (int4 v);
	
	int4 operator- (int4 v);
	
	int4 operator+ (int4 l, int4 r);
	
	int4 operator- (int4 l, int4 r);
	
	int4 operator* (int4 l, int4 r);
	
	int4 operator/ (int4 l, int4 r);
	
	
	//// bitwise ops
	
	int4 operator~ (int4 v);
	
	int4 operator& (int4 l, int4 r);
	
	int4 operator| (int4 l, int4 r);
	
	int4 operator^ (int4 l, int4 r);
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	bool4 operator< (int4 l, int4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator<= (int4 l, int4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator> (int4 l, int4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator>= (int4 l, int4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator== (int4 l, int4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator!= (int4 l, int4 r);
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (int4 l, int4 r);
	
	// componentwise ternary (c ? l : r)
	int4 select (bool4 c, int4 l, int4 r);
	
	
	//// misc ops
	// componentwise absolute
	int4 abs (int4 v);
	
	// componentwise minimum
	int4 min (int4 l, int4 r);
	
	// componentwise maximum
	int4 max (int4 l, int4 r);
	
	// componentwise clamp into range [a,b]
	int4 clamp (int4 x, int4 a, int4 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	int4 clamp (int4 x);
	
	// get minimum component of vector, optionally get component index via min_index
	int min_component (int4 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	int max_component (int4 v, int* max_index=nullptr);
	
	
	// componentwise wrap
	int4 wrap (int4 v, int4 range);
	
	// componentwise wrap
	int4 wrap (int4 v, int4 a, int4 b);
	
	
	
	//// Vector math
	
	// magnitude of vector
	float length (int4 v);
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	int length_sqr (int4 v);
	
	// distance between points, equivalent to length(a - b)
	float distance (int4 a, int4 b);
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	float4 normalize (int4 v);
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	float4 normalizesafe (int4 v);
	
	// dot product
	int dot (int4 l, int4 r);
	
}

